name: Build and Release Binaries

on:
  push:
    tags: 
      - 'v*.*.*'  # Matches semantic versioning tags like v1.0.0, v2.1.3, etc.
  workflow_dispatch:  # Allow manual triggering

jobs:
  build:
    runs-on: ${{ matrix.os }}
    permissions:
      contents: write

    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: linux-x64
            output: copy-trading-service-linux-x64
          - os: windows-latest
            target: windows-x64
            output: copy-trading-service-windows-x64.exe
          - os: macos-latest
            target: darwin-x64
            output: copy-trading-service-macos-x64
          - os: macos-latest
            target: darwin-arm64
            output: copy-trading-service-macos-arm64

    steps:
      - name: Get Branch/Tag Name
        run: |
          echo "Branch/Tag: ${{ github.ref_name }}"
          echo "Ref: ${{ github.ref }}"

      - name: Check out Git repository
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Cache Bun dependencies
        uses: actions/cache@v4
        with:
          path: ~/.bun/install/cache
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Install dependencies
        run: bun install

      - name: Build binary (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          bun build src/cli.ts --compile --outfile ${{ matrix.output }} --target bun-${{ matrix.target }}

      - name: Build binary (Windows)
        if: runner.os == 'Windows'
        run: |
          bun build src/cli.ts --compile --outfile ${{ matrix.output }} --target bun-${{ matrix.target }}

      - name: Make binary executable (Linux/macOS)
        if: runner.os != 'Windows'
        run: chmod +x ${{ matrix.output }}

      - name: Test binary (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          ./${{ matrix.output }} --help || echo "Binary test completed"

      - name: Test binary (Windows)
        if: runner.os == 'Windows'
        run: |
          ./${{ matrix.output }} --help || echo "Binary test completed"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.output }}
          path: ${{ matrix.output }}

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false

      - name: Upload Linux x64 Binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./copy-trading-service-linux-x64/copy-trading-service-linux-x64
          asset_name: copy-trading-service-linux-x64
          asset_content_type: application/octet-stream

      - name: Upload Windows x64 Binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./copy-trading-service-windows-x64.exe/copy-trading-service-windows-x64.exe
          asset_name: copy-trading-service-windows-x64.exe
          asset_content_type: application/octet-stream

      - name: Upload macOS x64 Binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./copy-trading-service-macos-x64/copy-trading-service-macos-x64
          asset_name: copy-trading-service-macos-x64
          asset_content_type: application/octet-stream

      - name: Upload macOS ARM64 Binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./copy-trading-service-macos-arm64/copy-trading-service-macos-arm64
          asset_name: copy-trading-service-macos-arm64
          asset_content_type: application/octet-stream
